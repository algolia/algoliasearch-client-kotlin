/** Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT. */
package com.algolia.client.model.composition

import com.algolia.client.exception.AlgoliaClientException
import com.algolia.client.extensions.internal.*
import kotlinx.serialization.*
import kotlinx.serialization.builtins.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*
import kotlinx.serialization.json.*
import kotlin.jvm.JvmInline

/**
 * InjectedItemSource
 *
 * Implementations:
 * - [ExternalSource]
 * - [SearchSource]
 */
@Serializable(InjectedItemSourceSerializer::class)
public sealed interface InjectedItemSource {
  @Serializable
  @JvmInline
  public value class SearchSourceValue(public val value: SearchSource) : InjectedItemSource

  @Serializable
  @JvmInline
  public value class ExternalSourceValue(public val value: ExternalSource) : InjectedItemSource

  public companion object {

    public fun of(value: SearchSource): InjectedItemSource = SearchSourceValue(value)

    public fun of(value: ExternalSource): InjectedItemSource = ExternalSourceValue(value)
  }
}

internal class InjectedItemSourceSerializer : JsonContentPolymorphicSerializer<InjectedItemSource>(InjectedItemSource::class) {
  override fun selectDeserializer(element: JsonElement): DeserializationStrategy<InjectedItemSource> = when {
    element is JsonObject -> SearchSource.serializer()
    element is JsonObject -> ExternalSource.serializer()
    else -> throw AlgoliaClientException("Failed to deserialize json element: $element")
  }
}
