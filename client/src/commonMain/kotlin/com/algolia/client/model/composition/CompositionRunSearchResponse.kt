/** Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT. */
package com.algolia.client.model.composition

import com.algolia.client.extensions.internal.*
import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*
import kotlinx.serialization.json.*

/**
 * CompositionRunSearchResponse
 *
 * @param objectID Unique record identifier.
 * @param appliedRules
 */
@Serializable(CompositionRunSearchResponseSerializer::class)
public data class CompositionRunSearchResponse(

  /** Unique record identifier. */
  val objectID: String,

  val appliedRules: List<CompositionRunAppliedRules>? = null,

  val additionalProperties: Map<String, JsonElement>? = null,
)

internal object CompositionRunSearchResponseSerializer : KSerializer<CompositionRunSearchResponse> {

  override val descriptor: SerialDescriptor = buildClassSerialDescriptor("CompositionRunSearchResponse") {
    element<String>("objectID")
    element<List<CompositionRunAppliedRules>>("appliedRules", isOptional = true)
  }

  override fun deserialize(decoder: Decoder): CompositionRunSearchResponse {
    val input = decoder.asJsonDecoder()
    val tree = input.decodeJsonObject()
    return CompositionRunSearchResponse(
      objectID = tree.getValue("objectID").let { input.json.decodeFromJsonElement(it) },
      appliedRules = tree["appliedRules"]?.let { input.json.decodeFromJsonElement(it) },
      additionalProperties = tree.filterKeys { it !in descriptor.elementNames },
    )
  }

  override fun serialize(encoder: Encoder, value: CompositionRunSearchResponse) {
    val output = encoder.asJsonEncoder()
    val json = buildJsonObject {
      put("objectID", output.json.encodeToJsonElement(value.objectID))
      value.appliedRules?.let { put("appliedRules", output.json.encodeToJsonElement(it)) }
      value.additionalProperties?.onEach { (key, element) -> put(key, element) }
    }
    (encoder as JsonEncoder).encodeJsonElement(json)
  }
}
