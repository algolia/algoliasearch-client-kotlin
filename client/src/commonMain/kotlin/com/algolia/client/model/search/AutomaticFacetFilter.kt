/**
 * Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be
 * lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
 */
package com.algolia.client.model.search

import kotlinx.serialization.*
import kotlinx.serialization.json.*

/**
 * Filter or optional filter to be applied to the search.
 *
 * @param facet Facet name to be applied as filter. The name must match placeholders in the
 *   `pattern` parameter. For example, with `pattern: {facet:genre}`, `automaticFacetFilters` must
 *   be `genre`.
 * @param score Filter scores to give different weights to individual filters.
 * @param disjunctive Whether the filter is disjunctive or conjunctive. If true the filter has
 *   multiple matches, multiple occurrences are combined with the logical `OR` operation. If false,
 *   multiple occurrences are combined with the logical `AND` operation.
 */
@Serializable
public data class AutomaticFacetFilter(

  /**
   * Facet name to be applied as filter. The name must match placeholders in the `pattern`
   * parameter. For example, with `pattern: {facet:genre}`, `automaticFacetFilters` must be `genre`.
   */
  @SerialName(value = "facet") val facet: String,

  /** Filter scores to give different weights to individual filters. */
  @SerialName(value = "score") val score: Int? = null,

  /**
   * Whether the filter is disjunctive or conjunctive. If true the filter has multiple matches,
   * multiple occurrences are combined with the logical `OR` operation. If false, multiple
   * occurrences are combined with the logical `AND` operation.
   */
  @SerialName(value = "disjunctive") val disjunctive: Boolean? = null,
) {}
