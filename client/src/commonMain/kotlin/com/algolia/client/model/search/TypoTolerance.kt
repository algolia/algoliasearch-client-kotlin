/** Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT. */
package com.algolia.client.model.search

import com.algolia.client.exception.AlgoliaClientException
import com.algolia.client.extensions.internal.*
import kotlinx.serialization.*
import kotlinx.serialization.builtins.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*
import kotlinx.serialization.json.*
import kotlin.jvm.JvmInline

/**
 * Whether [typo tolerance](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/typo-tolerance/) is enabled and how it is applied.  If typo tolerance is true, `min`, or `strict`, [word splitting and concetenation](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/splitting-and-concatenation/) is also active.
 *
 * Implementations:
 * - [Boolean] - *[TypoTolerance.of]*
 * - [TypoToleranceEnum]
 */
@Serializable(TypoToleranceSerializer::class)
public sealed interface TypoTolerance {
  @Serializable
  @JvmInline
  public value class BooleanValue(public val value: Boolean) : TypoTolerance

  @Serializable
  @JvmInline
  public value class TypoToleranceEnumValue(public val value: TypoToleranceEnum) : TypoTolerance

  public companion object {

    public fun of(value: Boolean): TypoTolerance {
      return BooleanValue(value)
    }
    public fun of(value: TypoToleranceEnum): TypoTolerance {
      return TypoToleranceEnumValue(value)
    }
  }
}

internal class TypoToleranceSerializer : JsonContentPolymorphicSerializer<TypoTolerance>(TypoTolerance::class) {
  override fun selectDeserializer(element: JsonElement): DeserializationStrategy<TypoTolerance> {
    return when {
      element.isBoolean -> TypoTolerance.BooleanValue.serializer()
      element.isString -> TypoToleranceEnum.serializer()
      else -> throw AlgoliaClientException("Failed to deserialize json element: $element")
    }
  }
}
