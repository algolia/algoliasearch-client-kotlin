/**
 * Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be
 * lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
 */
package com.algolia.client.model.abtestingv3

import kotlinx.serialization.*
import kotlinx.serialization.json.*

/**
 * MetricResult
 *
 * @param name
 * @param updatedAt Date and time when the metric was last updated, in RFC 3339 format.
 * @param `value`
 * @param pValue PValue for the first variant (control) will always be 0. For the other variants,
 *   pValue is calculated for the current variant based on the control.
 * @param valueCIHigh The upper bound of the 95% confidence interval for the metric value. The
 *   confidence interval is calculated using either the relative ratio or relative difference
 *   between the metric values for the control and the variant. Relative ratio is used for metrics
 *   that are ratios (e.g., click-through rate, conversion rate), while relative difference is used
 *   for continuous metrics (e.g., revenue).
 * @param valueCILow The lower bound of the 95% confidence interval for the metric value. The
 *   confidence interval is calculated using either the relative ratio or relative difference
 *   between the metric values for the control and the variant. Relative ratio is used for metrics
 *   that are ratios (e.g., click-through rate, conversion rate), while relative difference is used
 *   for continuous metrics (e.g., revenue).
 * @param dimension Dimension defined during test creation.
 * @param metadata
 * @param criticalValue The value that was computed during error correction. It is used to determine
 *   significance of the metric pValue. The critical value is calculated using Bonferroni or
 *   Benjamini-Hochberg corrections, based on the given configuration during the A/B test creation.
 * @param significant Whether the pValue is significant or not based on the critical value and the
 *   error correction algorithm used.
 */
@Serializable
public data class MetricResult(
  @SerialName(value = "name") val name: String,

  /** Date and time when the metric was last updated, in RFC 3339 format. */
  @SerialName(value = "updatedAt") val updatedAt: String,
  @SerialName(value = "value") val `value`: Double,

  /**
   * PValue for the first variant (control) will always be 0. For the other variants, pValue is
   * calculated for the current variant based on the control.
   */
  @SerialName(value = "pValue") val pValue: Double,

  /**
   * The upper bound of the 95% confidence interval for the metric value. The confidence interval is
   * calculated using either the relative ratio or relative difference between the metric values for
   * the control and the variant. Relative ratio is used for metrics that are ratios (e.g.,
   * click-through rate, conversion rate), while relative difference is used for continuous metrics
   * (e.g., revenue).
   */
  @SerialName(value = "valueCIHigh") val valueCIHigh: Double? = null,

  /**
   * The lower bound of the 95% confidence interval for the metric value. The confidence interval is
   * calculated using either the relative ratio or relative difference between the metric values for
   * the control and the variant. Relative ratio is used for metrics that are ratios (e.g.,
   * click-through rate, conversion rate), while relative difference is used for continuous metrics
   * (e.g., revenue).
   */
  @SerialName(value = "valueCILow") val valueCILow: Double? = null,

  /** Dimension defined during test creation. */
  @SerialName(value = "dimension") val dimension: String? = null,
  @SerialName(value = "metadata") val metadata: MetricMetadata? = null,

  /**
   * The value that was computed during error correction. It is used to determine significance of
   * the metric pValue. The critical value is calculated using Bonferroni or Benjamini-Hochberg
   * corrections, based on the given configuration during the A/B test creation.
   */
  @SerialName(value = "criticalValue") val criticalValue: Double? = null,

  /**
   * Whether the pValue is significant or not based on the critical value and the error correction
   * algorithm used.
   */
  @SerialName(value = "significant") val significant: Boolean? = null,
) {}
