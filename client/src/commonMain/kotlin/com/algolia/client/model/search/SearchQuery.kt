/** Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT. */
package com.algolia.client.model.search

import com.algolia.client.exception.AlgoliaClientException
import com.algolia.client.extensions.internal.*
import kotlinx.serialization.*
import kotlinx.serialization.builtins.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*
import kotlinx.serialization.json.*
import kotlin.jvm.JvmInline

/**
 * SearchQuery
 *
 * Implementations:
 * - [SearchForFacets]
 * - [SearchForHits]
 */
@Serializable(SearchQuerySerializer::class)
public sealed interface SearchQuery {
  @Serializable
  @JvmInline
  public value class SearchForFacetsValue(public val value: SearchForFacets) : SearchQuery

  @Serializable
  @JvmInline
  public value class SearchForHitsValue(public val value: SearchForHits) : SearchQuery

  public companion object {

    public fun of(value: SearchForFacets): SearchQuery {
      return SearchForFacetsValue(value)
    }
    public fun of(value: SearchForHits): SearchQuery {
      return SearchForHitsValue(value)
    }
  }
}

internal class SearchQuerySerializer : JsonContentPolymorphicSerializer<SearchQuery>(SearchQuery::class) {
  override fun selectDeserializer(element: JsonElement): DeserializationStrategy<SearchQuery> {
    return when {
      element is JsonObject && element.containsKey("facet") && element.containsKey("type") -> SearchForFacets.serializer()
      element is JsonObject -> SearchForHits.serializer()
      else -> throw AlgoliaClientException("Failed to deserialize json element: $element")
    }
  }
}
