/** Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT. */
package com.algolia.client.model.recommend

import com.algolia.client.exception.AlgoliaClientException
import com.algolia.client.extensions.internal.*
import kotlinx.serialization.*
import kotlinx.serialization.builtins.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*
import kotlinx.serialization.json.*
import kotlin.jvm.JvmInline

/**
 * RecommendationsRequest
 *
 * Implementations:
 * - [BoughtTogetherQuery]
 * - [LookingSimilarQuery]
 * - [RelatedQuery]
 * - [TrendingFacetsQuery]
 * - [TrendingItemsQuery]
 */
@Serializable(RecommendationsRequestSerializer::class)
public sealed interface RecommendationsRequest {
  @Serializable
  @JvmInline
  public value class BoughtTogetherQueryValue(public val value: BoughtTogetherQuery) : RecommendationsRequest

  @Serializable
  @JvmInline
  public value class RelatedQueryValue(public val value: RelatedQuery) : RecommendationsRequest

  @Serializable
  @JvmInline
  public value class TrendingItemsQueryValue(public val value: TrendingItemsQuery) : RecommendationsRequest

  @Serializable
  @JvmInline
  public value class TrendingFacetsQueryValue(public val value: TrendingFacetsQuery) : RecommendationsRequest

  @Serializable
  @JvmInline
  public value class LookingSimilarQueryValue(public val value: LookingSimilarQuery) : RecommendationsRequest

  public companion object {

    public fun of(value: BoughtTogetherQuery): RecommendationsRequest {
      return BoughtTogetherQueryValue(value)
    }
    public fun of(value: RelatedQuery): RecommendationsRequest {
      return RelatedQueryValue(value)
    }
    public fun of(value: TrendingItemsQuery): RecommendationsRequest {
      return TrendingItemsQueryValue(value)
    }
    public fun of(value: TrendingFacetsQuery): RecommendationsRequest {
      return TrendingFacetsQueryValue(value)
    }
    public fun of(value: LookingSimilarQuery): RecommendationsRequest {
      return LookingSimilarQueryValue(value)
    }
  }
}

internal class RecommendationsRequestSerializer : JsonContentPolymorphicSerializer<RecommendationsRequest>(RecommendationsRequest::class) {
  override fun selectDeserializer(element: JsonElement): DeserializationStrategy<RecommendationsRequest> {
    return when {
      element is JsonObject -> BoughtTogetherQuery.serializer()
      element is JsonObject -> RelatedQuery.serializer()
      element is JsonObject -> TrendingItemsQuery.serializer()
      element is JsonObject -> TrendingFacetsQuery.serializer()
      element is JsonObject -> LookingSimilarQuery.serializer()
      else -> throw AlgoliaClientException("Failed to deserialize json element: $element")
    }
  }
}
