/**
 * Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be
 * lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
 */
package com.algolia.client.model.ingestion

import kotlinx.serialization.*
import kotlinx.serialization.json.*

/**
 * DestinationInput
 *
 * @param indexName Algolia index name (case-sensitive).
 * @param recordType
 * @param attributesToExclude Attributes from your source to exclude from Algolia records. Not all
 *   your data attributes will be useful for searching. Keeping your Algolia records small increases
 *   indexing and search performance. - Exclude nested attributes with `.` notation. For example,
 *   `foo.bar` indexes the `foo` attribute and all its children **except** the `bar` attribute. -
 *   Exclude attributes from arrays with `[i]`, where `i` is the index of the array element. For
 *   example, `foo.[0].bar` only excludes the `bar` attribute from the first element of the `foo`
 *   array, but indexes the complete `foo` attribute for all other elements. Use `*` as wildcard:
 *   `foo.[*].bar` excludes `bar` from all elements of the `foo` array.
 */
@Serializable
public data class DestinationInput(

  /** Algolia index name (case-sensitive). */
  @SerialName(value = "indexName") val indexName: String,
  @SerialName(value = "recordType") val recordType: RecordType? = null,

  /**
   * Attributes from your source to exclude from Algolia records. Not all your data attributes will
   * be useful for searching. Keeping your Algolia records small increases indexing and search
   * performance. - Exclude nested attributes with `.` notation. For example, `foo.bar` indexes the
   * `foo` attribute and all its children **except** the `bar` attribute. - Exclude attributes from
   * arrays with `[i]`, where `i` is the index of the array element. For example, `foo.[0].bar` only
   * excludes the `bar` attribute from the first element of the `foo` array, but indexes the
   * complete `foo` attribute for all other elements. Use `*` as wildcard: `foo.[*].bar` excludes
   * `bar` from all elements of the `foo` array.
   */
  @SerialName(value = "attributesToExclude") val attributesToExclude: List<String>? = null,
) {}
