/** Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT. */
package com.algolia.client.model.composition

import com.algolia.client.extensions.internal.*
import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*
import kotlinx.serialization.json.*

/**
 * ResultsInjectedItemInfoResponse
 *
 * @param key
 * @param appliedRules
 */
@Serializable(ResultsInjectedItemInfoResponseSerializer::class)
public data class ResultsInjectedItemInfoResponse(

  val key: String,

  val appliedRules: List<ResultsInjectedItemAppliedRulesInfoResponse>? = null,

  val additionalProperties: Map<String, JsonElement>? = null,
)

internal object ResultsInjectedItemInfoResponseSerializer : KSerializer<ResultsInjectedItemInfoResponse> {

  override val descriptor: SerialDescriptor = buildClassSerialDescriptor("ResultsInjectedItemInfoResponse") {
    element<String>("key")
    element<List<ResultsInjectedItemAppliedRulesInfoResponse>>("appliedRules", isOptional = true)
  }

  override fun deserialize(decoder: Decoder): ResultsInjectedItemInfoResponse {
    val input = decoder.asJsonDecoder()
    val tree = input.decodeJsonObject()
    return ResultsInjectedItemInfoResponse(
      key = tree.getValue("key").let { input.json.decodeFromJsonElement(it) },
      appliedRules = tree["appliedRules"]?.let { input.json.decodeFromJsonElement(it) },
      additionalProperties = tree.filterKeys { it !in descriptor.elementNames },
    )
  }

  override fun serialize(encoder: Encoder, value: ResultsInjectedItemInfoResponse) {
    val output = encoder.asJsonEncoder()
    val json = buildJsonObject {
      put("key", output.json.encodeToJsonElement(value.key))
      value.appliedRules?.let { put("appliedRules", output.json.encodeToJsonElement(it)) }
      value.additionalProperties?.onEach { (key, element) -> put(key, element) }
    }
    (encoder as JsonEncoder).encodeJsonElement(json)
  }
}
